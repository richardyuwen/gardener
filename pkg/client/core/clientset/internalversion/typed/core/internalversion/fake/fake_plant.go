// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	core "github.com/gardener/gardener/pkg/apis/core"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakePlants implements PlantInterface
type FakePlants struct {
	Fake *FakeCore
	ns   string
}

var plantsResource = schema.GroupVersionResource{Group: "core.gardener.cloud", Version: "", Resource: "plants"}

var plantsKind = schema.GroupVersionKind{Group: "core.gardener.cloud", Version: "", Kind: "Plant"}

// Get takes name of the plant, and returns the corresponding plant object, and an error if there is any.
func (c *FakePlants) Get(name string, options v1.GetOptions) (result *core.Plant, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(plantsResource, c.ns, name), &core.Plant{})

	if obj == nil {
		return nil, err
	}
	return obj.(*core.Plant), err
}

// List takes label and field selectors, and returns the list of Plants that match those selectors.
func (c *FakePlants) List(opts v1.ListOptions) (result *core.PlantList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(plantsResource, plantsKind, c.ns, opts), &core.PlantList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &core.PlantList{ListMeta: obj.(*core.PlantList).ListMeta}
	for _, item := range obj.(*core.PlantList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested plants.
func (c *FakePlants) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(plantsResource, c.ns, opts))

}

// Create takes the representation of a plant and creates it.  Returns the server's representation of the plant, and an error, if there is any.
func (c *FakePlants) Create(plant *core.Plant) (result *core.Plant, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(plantsResource, c.ns, plant), &core.Plant{})

	if obj == nil {
		return nil, err
	}
	return obj.(*core.Plant), err
}

// Update takes the representation of a plant and updates it. Returns the server's representation of the plant, and an error, if there is any.
func (c *FakePlants) Update(plant *core.Plant) (result *core.Plant, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(plantsResource, c.ns, plant), &core.Plant{})

	if obj == nil {
		return nil, err
	}
	return obj.(*core.Plant), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakePlants) UpdateStatus(plant *core.Plant) (*core.Plant, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(plantsResource, "status", c.ns, plant), &core.Plant{})

	if obj == nil {
		return nil, err
	}
	return obj.(*core.Plant), err
}

// Delete takes name of the plant and deletes it. Returns an error if one occurs.
func (c *FakePlants) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(plantsResource, c.ns, name), &core.Plant{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakePlants) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(plantsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &core.PlantList{})
	return err
}

// Patch applies the patch and returns the patched plant.
func (c *FakePlants) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *core.Plant, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(plantsResource, c.ns, name, pt, data, subresources...), &core.Plant{})

	if obj == nil {
		return nil, err
	}
	return obj.(*core.Plant), err
}
